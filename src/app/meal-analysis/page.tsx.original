// *** ENHANCED MEAL-ANALYSIS PAGE WITH HEALTH IMPACT PANEL ***
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { useAuth } from '@/lib/authContext';
import { trySaveMeal } from '@/lib/mealUtils';
import { isValidAnalysis, createFallbackAnalysis, normalizeAnalysisResult } from '@/lib/utils/analysisValidator';
import ErrorCard from '@/components/ErrorCard';
import FallbackAlert from '@/components/FallbackAlert';
import { generateNutritionInsights } from '@/utils/formatNutrientInsights';
import NutrientInsightsSection from '@/components/NutrientInsightsSection';
import PrecisionNutrientPanel from '@/components/PrecisionNutrientPanel';
import HealthImpactPanel from '@/components/HealthImpactPanel';
import { analyzeMealWithPrecision } from '@/utils/precisionNutrients';
import EnhancedHealthImpact from '@/components/EnhancedHealthImpact';
import { v4 as uuidv4 } from 'uuid';
import { 
  AnalysisResult, 
  NutrientDetail, 
  DetailedIngredient,
  getScoreValue,
  getDisplayDescription
} from './types';
import DetailedNutritionPanel from '@/components/DetailedNutritionPanel';

interface Nutrient {
  name: string;
  value: string;
  unit: string;
  isHighlight: boolean;
}

// Helper function to format nutrient values for display
const formatNutrientValue = (value: string | number): string => {
  if (typeof value === 'string') {
    // Try to parse the string as a number
    const numValue = parseFloat(value);
    if (!isNaN(numValue)) {
      return numValue % 1 === 0 ? numValue.toString() : numValue.toFixed(1);
    }
    return value;
  } else if (typeof value === 'number') {
    return value % 1 === 0 ? value.toString() : value.toFixed(1);
  }
  return '';
};

// Function to determine if a nutrient should be highlighted (beneficial)
function isNutrientBeneficial(name: string): boolean {
  const beneficialNutrients = [
    'protein', 'fiber', 'omega-3', 'omega 3', 'monounsaturated', 'polyunsaturated',
    'vitamin a', 'vitamin c', 'vitamin d', 'vitamin e', 'magnesium', 'potassium',
    'zinc', 'iron', 'calcium', 'vitamin b6', 'folate', 'vitamin b12'
  ];
  return beneficialNutrients.some(n => name.toLowerCase().includes(n));
}

// Function to determine if a nutrient should be flagged (concerning)
function isNutrientConcerning(name: string, value: string | number, percentOfDailyValue?: number): boolean {
  const concerningNutrients = [
    'sugar', 'added sugar', 'saturated fat', 'trans fat', 'sodium', 'cholesterol'
  ];
  
  // If the nutrient is in the concerning list and either:
  // - has a percent of daily value > 25%
  // - or is sugar with high absolute value (>15g)
  if (concerningNutrients.some(n => name.toLowerCase().includes(n))) {
    if (percentOfDailyValue && percentOfDailyValue > 25) return true;
    
    if (name.toLowerCase().includes('sugar')) {
      const numValue = typeof value === 'string' ? parseFloat(value) : value;
      if (!isNaN(numValue as number) && numValue > 15) return true;
    }
    
    return false;
  }
  
  return false;
}

// Function to get description for a nutrient
function getNutrientImpactDescription(name: string): string {
  const descriptions: Record<string, string> = {
    'protein': 'Supports muscle repair and growth',
    'fiber': 'Promotes digestive health and satiety',
    'sugar': 'Can negatively impact blood sugar levels and energy',
    'added sugar': 'May contribute to inflammation and energy crashes',
    'saturated fat': 'Linked to higher cholesterol when consumed in excess',
    'monounsaturated fat': 'Supports heart health',
    'polyunsaturated fat': 'Essential for cell function and inflammation management',
    'omega-3': 'Anti-inflammatory and brain-supportive fat',
    'vitamin c': 'Supports immune function and antioxidant activity',
    'vitamin d': 'Essential for calcium absorption and bone health',
    'magnesium': 'Supports sleep quality and muscle relaxation',
    'iron': 'Essential for oxygen transport in the bloodstream',
    'potassium': 'Helps maintain fluid balance and healthy blood pressure',
    'sodium': 'Excessive intake may increase blood pressure in sensitive individuals',
    'zinc': 'Supports immune function and wound healing',
    'vitamin b6': 'Important for energy metabolism and brain health',
    'folate': 'Vital for cell division and DNA synthesis',
    'vitamin b12': 'Essential for nerve function and red blood cell formation'
  };
  
  // Try to find exact match first
  if (descriptions[name.toLowerCase()]) {
    return descriptions[name.toLowerCase()];
  }
  
  // Otherwise look for partial matches
  for (const key in descriptions) {
    if (name.toLowerCase().includes(key)) {
      return descriptions[key];
    }
  }
  
  return '';
}

// Function to get emoji/icon for a nutrient category
function getNutrientCategoryIcon(category: string): string {
  switch (category.toLowerCase()) {
    case 'macronutrient':
    case 'macronutrients':
      return 'üç≤';
    case 'protein':
      return 'ü•©';
    case 'carbohydrates':
    case 'carbs':
      return 'üçö';
    case 'fats':
    case 'fat':
      return 'ü•ë';
    case 'vitamins':
    case 'vitamin':
      return 'üçä';
    case 'minerals':
    case 'mineral':
      return 'üßÇ';
    case 'fiber':
      return 'üåæ';
    case 'sugar':
      return 'üçØ';
    default:
      return 'üìä';
  }
}

// Component to display ingredients with confidence levels
const IngredientsList = ({ ingredients }: { ingredients: DetailedIngredient[] }) => {
  const [showConfidenceInfo, setShowConfidenceInfo] = useState(false);
  
  return (
    <div className="mt-4">
      <div className="flex items-center mb-2">
        <h3 className="text-base font-medium text-gray-800">Identified Ingredients</h3>
        <button 
          className="ml-2 text-primary hover:text-secondary transition-colors"
          onClick={() => setShowConfidenceInfo(!showConfidenceInfo)}
          aria-label="Show confidence information"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
      </div>
      
      {showConfidenceInfo && (
        <div className="bg-slate-50 p-3 rounded-md mb-3 text-xs text-slate-700 border border-slate-200">
          <p className="mb-1 font-medium">Confidence Indicators:</p>
          <ul className="space-y-1">
            <li className="flex items-center"><span className="mr-2">üü¢</span> High confidence (8-10)</li>
            <li className="flex items-center"><span className="mr-2">üü°</span> Medium confidence (5-7)</li>
            <li className="flex items-center"><span className="mr-2">üî¥</span> Low confidence (1-4)</li>
          </ul>
        </div>
      )}
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
        {ingredients.map((ingredient, index) => (
          <div 
            key={index} 
            className="flex items-center py-1.5 px-2.5 bg-white rounded-md border border-gray-200 shadow-sm"
          >
            <span className="mr-2">{ingredient.confidenceEmoji}</span>
            <span className="flex-1 text-sm">{ingredient.name}</span>
            {ingredient.category && ingredient.category !== 'unknown' && (
              <span className="text-xs bg-gray-100 text-gray-600 px-1.5 py-0.5 rounded-full">
                {ingredient.category}
              </span>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

// SaveStatusBanner component to show when meal is not saved
const SaveStatusBanner = ({ 
  mealSaved, 
  fallback = false,
  lowConfidence = false,
  saveError = null,
  userId = null
}: { 
  mealSaved: boolean; 
  fallback?: boolean;
  lowConfidence?: boolean;
  saveError?: string | null;
  userId?: string | null;
}) => {
  if (mealSaved) return null;
  
  let message = '';
  let icon: React.ReactNode = null;
  let bgColor = '';
  let borderColor = '';
  let textColor = '';
  let actionLink = null;
  
  if (fallback || lowConfidence) {
    // Unable to save due to low confidence or fallback
    message = "‚ö†Ô∏è Meal not saved due to low confidence or unclear image quality.";
    icon = (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
      </svg>
    );
    bgColor = "bg-amber-50";
    borderColor = "border-amber-300";
    textColor = "text-amber-800";
    actionLink = (
      <Link href="/upload" className="text-amber-800 font-medium underline">
        Try another image
      </Link>
    );
  } else if (saveError) {
    // Save operation failed for a specific reason
    message = saveError || "Failed to save meal. Please try again.";
    icon = (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
      </svg>
    );
    bgColor = "bg-red-50";
    borderColor = "border-red-300";
    textColor = "text-red-800";
    actionLink = (
      <Link href="/upload" className="text-red-800 font-medium underline">
        Try again
      </Link>
    );
  } else if (!userId) {
    // User not signed in
    message = "üîí Sign in to save this meal to your health history.";
    icon = (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
      </svg>
    );
    bgColor = "bg-blue-50";
    borderColor = "border-blue-300";
    textColor = "text-blue-800";
    actionLink = (
      <Link href="/login" className="text-blue-800 font-medium underline">
        Sign in
      </Link>
    );
  } else {
    // Generic case - not saved for other reasons
    message = "This meal analysis has not been saved to your history.";
    icon = (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
      </svg>
    );
    bgColor = "bg-gray-50";
    borderColor = "border-gray-300";
    textColor = "text-gray-800";
  }
  
  return (
    <div className={`mb-4 ${bgColor} border ${borderColor} rounded-lg p-3 sm:p-4 text-sm sm:text-base ${textColor}`}>
      <div className="flex items-start">
        <div className="mr-2 mt-0.5 flex-shrink-0">
          {icon}
        </div>
        <div>
          <p>{message}</p>
          {actionLink && <div className="mt-2">{actionLink}</div>}
        </div>
      </div>
    </div>
  );
};

/**
 * Component to display a warning when using a fallback model
 */
const ModelWarningBanner = ({ modelInfo }: { modelInfo?: AnalysisResult['modelInfo'] }) => {
  // Skip if no model info is available
  if (!modelInfo) return null;
  
  // Only show banner if using GPT model or fallback
  if (!modelInfo.usedFallback && !modelInfo.model?.includes('gpt')) return null;
  
  return (
    <div className="mb-3 px-3 py-2 bg-yellow-50 text-yellow-800 border border-yellow-100 rounded-md text-xs flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
      </svg>
      <span>
        {modelInfo.usedFallback 
          ? 'Using estimated nutritional data due to text extraction challenges.'
          : 'Analysis performed using AI text extraction.'}
        {modelInfo.ocrConfidence !== undefined && 
          ` Text extraction confidence: ${Math.round(modelInfo.ocrConfidence * 100)}%`}
      </span>
    </div>
  );
};

const LabelDetectionInfo = ({ modelInfo }: { modelInfo?: AnalysisResult['modelInfo'] }) => {
  // Skip if no model info or no label detection was used
  if (!modelInfo || !modelInfo.usedLabelDetection || !modelInfo.detectedLabel) return null;
  
  // Calculate confidence percentage
  const confidencePercent = modelInfo.labelConfidence ? Math.round(modelInfo.labelConfidence * 100) : 0;
  
  return (
    <div className="mb-3 px-3 py-2 bg-green-50 text-green-800 border border-green-100 rounded-md text-xs flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span>
        üçΩÔ∏è Detected <span className="font-medium">{modelInfo.detectedLabel}</span> via image recognition
        {confidencePercent > 0 && ` (${confidencePercent}% confidence)`}
      </span>
    </div>
  );
};

// FallbackWarningBanner component to show when displaying fallback results
const FallbackWarningBanner = ({ fallback }: { fallback?: boolean }) => {
  // Don't show if not in fallback mode
  if (!fallback) {
    return null;
  }
  
  return (
    <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-md">
      <div className="flex items-start">
        <div className="flex-shrink-0 pt-0.5">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-500" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        </div>
        <div className="ml-3">
          <h3 className="text-sm font-medium text-amber-800">Limited Analysis Mode</h3>
          <div className="mt-1 text-xs text-amber-700">
            <p>Analysis was performed using a fallback method. Results may be less accurate.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Utility function to process feedback/suggestions of different formats
const processFeedback = (input: any): string[] => {
  console.log("Processing feedback input:", input);
  
  // Handle result wrapped in another object (response.data.result format)
  if (input && typeof input === 'object' && input.result && !Array.isArray(input)) {
    console.log("Unwrapping result object");
    return processFeedback(input.result);
  }

  if (Array.isArray(input)) {
    console.log("Input is array of length:", input.length);
    return input.length > 0 ? input.filter(Boolean) : ["No information available."];
  }
  
  if (typeof input === 'string' && input.trim()) {
    console.log("Input is string");
    return [input];
  }
  
  if (input === null || input === undefined) {
    console.log("Input is null or undefined");
    return ["No information available."];
  }
  
  console.log("Input has unknown format", typeof input);
  return ["No information available."];
};

// Helper function to get icons for nutrients
const getNutrientIcon = (nutrientName: string): React.ReactNode => {
  const name = nutrientName.toLowerCase();
  if (name.includes('protein')) return 'ü•©';
  if (name.includes('fiber')) return 'üåæ';
  if (name.includes('fat')) return 'ü•ë';
  if (name.includes('vitamin c')) return 'üçä';
  if (name.includes('vitamin d')) return '‚òÄÔ∏è';
  if (name.includes('vitamin')) return 'üíä';
  if (name.includes('calcium')) return 'ü•õ';
  if (name.includes('iron')) return '‚öôÔ∏è';
  if (name.includes('zinc')) return 'üîã';
  if (name.includes('magnesium')) return 'üß™';
  if (name.includes('sodium') || name.includes('salt')) return 'üßÇ';
  if (name.includes('potassium')) return 'üçå';
  if (name.includes('carb')) return 'üçö';
  if (name.includes('omega')) return 'üêü';
  return 'ü•ó';
};

// Helper function to get descriptions for nutrients
const getNutrientDescription = (nutrientName: string): string => {
  const name = nutrientName.toLowerCase();
  if (name.includes('protein')) 
    return 'Essential for muscle repair, immune function, and cell maintenance. Promotes satiety and helps maintain lean body mass.';
  if (name.includes('fiber')) 
    return 'Supports digestive health, helps control blood sugar, and contributes to heart health by lowering cholesterol.';
  if (name.includes('omega-3')) 
    return 'Anti-inflammatory fatty acids that support brain health, heart function, and may help reduce risk factors for chronic diseases.';
  if (name.includes('vitamin d')) 
    return 'Critical for calcium absorption, bone health, immune function, and mood regulation.';
  if (name.includes('iron')) 
    return 'Essential for oxygen transport in the blood, energy production, and cognitive function.';
  if (name.includes('calcium')) 
    return 'Supports bone and teeth health, muscle function, nerve transmission, and blood clotting.';
  if (name.includes('magnesium')) 
    return 'Involved in over 300 enzymatic reactions, supports muscle and nerve function, blood glucose control, and sleep quality.';
  
  // Default generic description
  return `An important nutrient for overall health and wellbeing.`;
};

// Component to display research-backed nutrient insights
const ResearchBackedInsights = ({ nutrients, goal }: { nutrients: NutrientDetail[], goal?: string }) => {
  // Filter for nutrients with high percentage of daily value or that are marked as highlights
  const significantNutrients = nutrients.filter(n => 
    (n.percentOfDailyValue && n.percentOfDailyValue > 20) || n.isHighlight
  );

  if (significantNutrients.length === 0) return null;

  return (
    <div className="mt-6 space-y-4">
      <h3 className="text-lg font-medium text-gray-800 flex items-center">
        <span className="mr-2">üß†</span> Evidence-Based Nutrient Insights
      </h3>
      <div className="rounded-lg border border-green-100 bg-green-50 overflow-hidden">
        {significantNutrients.map((nutrient, index) => {
          // Determine if this nutrient is particularly beneficial for the goal
          let isRelevantForGoal = false;
          let goalSpecificInfo = '';

          if (goal) {
            const goalLower = goal.toLowerCase();
            const nutrientLower = nutrient.name.toLowerCase();
            
            if (goalLower.includes('sleep') && ['tryptophan', 'magnesium', 'calcium'].some(n => nutrientLower.includes(n))) {
              isRelevantForGoal = true;
              goalSpecificInfo = nutrientLower.includes('tryptophan') 
                ? 'Tryptophan supports melatonin synthesis, the hormone that regulates sleep.'
                : nutrientLower.includes('magnesium')
                ? 'Magnesium helps regulate neurotransmitters that are critical for sleep quality.'
                : 'Calcium assists in processing tryptophan into melatonin.';
            } else if (goalLower.includes('muscle') && ['protein', 'leucine', 'zinc'].some(n => nutrientLower.includes(n))) {
              isRelevantForGoal = true;
              goalSpecificInfo = nutrientLower.includes('protein') 
                ? 'Protein provides essential amino acids needed for muscle protein synthesis.'
                : nutrientLower.includes('leucine')
                ? 'Leucine is a branched-chain amino acid that directly stimulates muscle growth.'
                : 'Zinc is required for protein synthesis and cellular growth.';
            } else if (goalLower.includes('energy') && ['iron', 'b12', 'vitamin b'].some(n => nutrientLower.includes(n))) {
              isRelevantForGoal = true;
              goalSpecificInfo = nutrientLower.includes('iron') 
                ? 'Iron helps transport oxygen in the blood, critical for energy production.'
                : 'B vitamins are essential for converting food into energy at the cellular level.';
            }
          }

          return (
            <div key={index} className={`p-4 ${index > 0 ? 'border-t border-green-100' : ''}`}>
              <div className="flex items-start">
                <div className="flex-shrink-0 w-10 h-10 rounded-full bg-green-100 flex items-center justify-center mt-0.5">
                  {getNutrientIcon(nutrient.name)}
                </div>
                <div className="ml-3 flex-1">
                  <h4 className="text-sm font-medium text-gray-900 flex items-center">
                    {nutrient.name}
                    {isRelevantForGoal && (
                      <span className="ml-2 px-2 py-0.5 bg-primary/10 text-primary rounded-full text-xs">
                        Supports {goal}
                      </span>
                    )}
                  </h4>
                  <div className="mt-1 text-sm text-gray-600">
                    <p className="mb-1">{getNutrientDescription(nutrient.name)}</p>
                    {isRelevantForGoal && <p className="text-primary-800 font-medium">{goalSpecificInfo}</p>}
                    <div className="mt-2 flex items-center text-xs text-gray-500">
                      <span className="font-medium">{formatNutrientValue(nutrient.value)} {nutrient.unit}</span>
                      {nutrient.percentOfDailyValue && (
                        <span className="ml-2">({nutrient.percentOfDailyValue}% of daily value)</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Component to display smart meal suggestions
const SmartMealSuggestions = ({ nutrients, goal }: { nutrients: NutrientDetail[], goal?: string }) => {
  // Generate suggestions based on nutrient analysis
  const generateSuggestions = (): { title: string, description: string, foods: string[] }[] => {
    const suggestions = [];
    const nutrientMap = new Map(nutrients.map(n => [n.name.toLowerCase(), n]));
    
    // Check for low fiber
    if (!nutrientMap.has('fiber') || 
        (nutrientMap.get('fiber')?.percentOfDailyValue || 0) < 20) {
      suggestions.push({
        title: "Add More Fiber",
        description: "This meal is low in fiber. Fiber supports digestive health and helps you feel fuller for longer.",
        foods: ["Beans", "Lentils", "Broccoli", "Oats", "Chia seeds", "Berries"]
      });
    }
    
    // Check for low protein
    if (!nutrientMap.has('protein') || 
        (nutrientMap.get('protein')?.percentOfDailyValue || 0) < 25) {
      suggestions.push({
        title: "Boost Protein Intake",
        description: "Consider adding protein-rich foods to your next meal to support muscle maintenance and satiety.",
        foods: ["Chicken breast", "Greek yogurt", "Tofu", "Eggs", "Cottage cheese", "Salmon"]
      });
    }
    
    // Goal-specific suggestions
    if (goal) {
      const goalLower = goal.toLowerCase();
      
      if (goalLower.includes('sleep')) {
        suggestions.push({
          title: "Support Better Sleep",
          description: "For your next meal, consider foods containing tryptophan, magnesium, and calcium which can enhance sleep quality.",
          foods: ["Turkey", "Milk", "Yogurt", "Almonds", "Bananas", "Spinach", "Tart cherries"]
        });
      } else if (goalLower.includes('muscle')) {
        suggestions.push({
          title: "Promote Muscle Recovery",
          description: "To support your muscle-building goals, your next meal should include adequate protein and recovery nutrients.",
          foods: ["Lean beef", "Chicken", "Eggs", "Sweet potatoes", "Salmon", "Quinoa", "Cottage cheese"]
        });
      } else if (goalLower.includes('energy')) {
        suggestions.push({
          title: "Sustain Energy Levels",
          description: "For consistent energy, emphasize complex carbs, B vitamins, and iron in your next meal.",
          foods: ["Brown rice", "Spinach", "Lentils", "Fortified cereals", "Avocado", "Oats"]
        });
      }
    }
    
    // If we didn't generate any specific suggestions, add a general one
    if (suggestions.length === 0) {
      suggestions.push({
        title: "Maintain Balanced Nutrition",
        description: "For your next meal, continue with a balanced approach including lean protein, complex carbs, and healthy fats.",
        foods: ["Mixed vegetables", "Lean protein", "Whole grains", "Nuts", "Seeds", "Fruits"]
      });
    }
    
    return suggestions;
  };
  
  const suggestions = generateSuggestions();
  
  return (
    <div className="mt-6 space-y-4">
      <h3 className="text-lg font-medium text-gray-800 flex items-center">
        <span className="mr-2">üß≠</span> Smart Meal Suggestions
      </h3>
      <div className="space-y-4">
        {suggestions.map((suggestion, index) => (
          <div key={index} className="rounded-lg border border-blue-100 bg-blue-50 p-4">
            <h4 className="text-md font-medium text-blue-800">{suggestion.title}</h4>
            <p className="mt-1 text-sm text-blue-700">{suggestion.description}</p>
            <div className="mt-3 flex flex-wrap gap-2">
              {suggestion.foods.map((food, i) => (
                <span key={i} className="px-2 py-1 rounded-full bg-blue-100 text-blue-700 text-xs">
                  {food}
                </span>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Component to display nutrients grouped by category
const NutrientCategorySection = ({ nutrients, title, icon, className = "" }: { 
  nutrients: NutrientDetail[]; 
  title: string; 
  icon: string;
  className?: string;
}) => {
  if (!nutrients || nutrients.length === 0) return null;
  
  return (
    <div className={`mb-4 ${className}`}>
      <h3 className="text-sm font-semibold text-navy flex items-center mb-2">
        <span className="mr-1.5">{icon}</span> {title}
      </h3>
      <div className="grid grid-cols-2 gap-2">
        {nutrients.map((nutrient, idx) => (
          <div key={idx} className="flex items-center justify-between bg-gray-50 p-2 rounded">
            <span className="text-sm text-gray-600">{nutrient.name}</span>
            <span className="text-sm font-medium">
              {formatNutrientValue(nutrient.value)} {nutrient.unit}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

// Component to display healthTags grouped by type
const HealthTagsSection = ({ 
  healthTags = [], 
  benefitTags = [], 
  concernTags = [] 
}: { 
  healthTags?: string[]; 
  benefitTags?: string[]; 
  concernTags?: string[];
}) => {
  if (
    (!healthTags || healthTags.length === 0) && 
    (!benefitTags || benefitTags.length === 0) && 
    (!concernTags || concernTags.length === 0)
  ) {
    return null;
  }
  
  return (
    <div className="mb-6">
      <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
        <span className="mr-2">üè∑Ô∏è</span>
        Health Impact Tags
      </h2>
      <div className="space-y-3">
        {benefitTags && benefitTags.length > 0 && (
          <div className="bg-green-50 border border-green-100 rounded-xl p-3">
            <h3 className="text-sm font-semibold text-navy mb-2">Benefits</h3>
            <div className="flex flex-wrap gap-2">
              {benefitTags.map((tag, idx) => (
                <span key={idx} className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )}
        
        {concernTags && concernTags.length > 0 && (
          <div className="bg-amber-50 border border-amber-100 rounded-xl p-3">
            <h3 className="text-sm font-semibold text-navy mb-2">Potential Concerns</h3>
            <div className="flex flex-wrap gap-2">
              {concernTags.map((tag, idx) => (
                <span key={idx} className="text-xs bg-amber-100 text-amber-800 px-2 py-1 rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )}
        
        {healthTags && healthTags.length > 0 && (
          <div className="bg-blue-50 border border-blue-100 rounded-xl p-3">
            <h3 className="text-sm font-semibold text-navy mb-2">Nutrition Attributes</h3>
            <div className="flex flex-wrap gap-2">
              {healthTags.map((tag, idx) => (
                <span key={idx} className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Component to display expanded nutrient information with status and impact
const EnhancedNutrientDisplay = ({ nutrient }: { nutrient: NutrientDetail }) => {
  const isBeneficial = isNutrientBeneficial(nutrient.name);
  const isConcerning = isNutrientConcerning(nutrient.name, nutrient.value, nutrient.percentOfDailyValue);
  const description = getNutrientImpactDescription(nutrient.name);
  
  let statusIcon = '';
  let statusColor = '';
  
  if (isBeneficial) {
    statusIcon = '‚úÖ';
    statusColor = 'text-green-700';
  } else if (isConcerning) {
    statusIcon = '‚ö†Ô∏è';
    statusColor = 'text-amber-700';
  } else {
    statusIcon = '‚Ä¢';
    statusColor = 'text-slate-400';
  }
  
  return (
    <div className="bg-white p-3 rounded-lg border border-slate-200 shadow-sm">
      <div className="flex items-center justify-between mb-1">
        <span className="font-medium text-slate-800">{nutrient.name}</span>
        <span className={`font-semibold ${statusColor}`}>
          {formatNutrientValue(nutrient.value)} {nutrient.unit}
          {nutrient.percentOfDailyValue && 
            <span className="text-xs ml-1 text-slate-500">
              ({nutrient.percentOfDailyValue}% DV)
            </span>
          }
        </span>
      </div>
      {description && (
        <p className="text-xs text-slate-600 mt-1 flex items-start">
          <span className="mr-1 mt-0.5">{statusIcon}</span>
          {description}
        </p>
      )}
    </div>
  );
};

// Enhanced MacronutrientPanel to show detailed breakdowns
const EnhancedMacronutrientPanel = ({ nutrients }: { nutrients: NutrientDetail[] }) => {
  // Filter nutrients by category
  const caloriesNutrient = nutrients.find(n => n.name.toLowerCase().includes('calorie') || n.name.toLowerCase() === 'energy');
  
  const proteinNutrients = nutrients.filter(n => 
    n.name.toLowerCase().includes('protein')
  );
  
  const carbNutrients = nutrients.filter(n => 
    n.name.toLowerCase().includes('carb') || 
    n.name.toLowerCase().includes('fiber') || 
    n.name.toLowerCase().includes('sugar')
  );
  
  const fatNutrients = nutrients.filter(n => 
    n.name.toLowerCase().includes('fat')
  );
  
  // Add missing categories if not found
  const allMacros = [];
  
  if (caloriesNutrient) {
    allMacros.push(caloriesNutrient);
  }
  
  if (proteinNutrients.length > 0) {
    allMacros.push(...proteinNutrients);
  } else {
    allMacros.push({
      name: 'Protein',
      value: 'N/A',
      unit: 'g',
      isHighlight: false
    });
  }
  
  // Get specific carb nutrients
  const totalCarbs = carbNutrients.find(n => 
    n.name.toLowerCase().includes('total carb') || 
    (n.name.toLowerCase().includes('carb') && !n.name.toLowerCase().includes('fiber') && !n.name.toLowerCase().includes('sugar'))
  );
  
  const fiber = carbNutrients.find(n => n.name.toLowerCase().includes('fiber'));
  const sugar = carbNutrients.find(n => n.name.toLowerCase().includes('sugar'));
  
  if (totalCarbs) {
    allMacros.push(totalCarbs);
  }
  
  if (fiber) {
    allMacros.push(fiber);
  }
  
  if (sugar) {
    allMacros.push(sugar);
  }
  
  // Get specific fat nutrients
  const totalFat = fatNutrients.find(n => 
    n.name.toLowerCase().includes('total fat') || 
    (n.name.toLowerCase() === 'fat')
  );
  
  const saturatedFat = fatNutrients.find(n => n.name.toLowerCase().includes('saturated'));
  const unsaturatedFats = fatNutrients.filter(n => 
    n.name.toLowerCase().includes('monounsaturated') || 
    n.name.toLowerCase().includes('polyunsaturated') ||
    n.name.toLowerCase().includes('omega')
  );
  
  if (totalFat) {
    allMacros.push(totalFat);
  }
  
  if (saturatedFat) {
    allMacros.push(saturatedFat);
  }
  
  unsaturatedFats.forEach(fat => {
    allMacros.push(fat);
  });
  
  // Render the macro panel
  return (
    <div className="bg-white rounded-lg border border-slate-200 shadow-sm p-4 mb-6">
      <h3 className="text-lg font-semibold text-slate-800 mb-3 flex items-center">
        <span className="mr-2">üç≤</span>
        Macronutrient Composition
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        {allMacros.map((nutrient, index) => (
          <EnhancedNutrientDisplay key={index} nutrient={nutrient} />
        ))}
      </div>
      
      {/* Special handling for high sugar content */}
      {sugar && isNutrientConcerning(sugar.name, sugar.value) && (
        <div className="mt-4 bg-amber-50 border border-amber-200 rounded-lg p-3">
          <h4 className="font-medium text-amber-800 flex items-center mb-1">
            <span className="mr-1.5">‚ö†Ô∏è</span>
            High Sugar Alert
          </h4>
          <p className="text-sm text-amber-700">
            {formatNutrientValue(sugar.value)}{sugar.unit} exceeds the recommended limit.
            Excess sugar can spike blood glucose, disrupt sleep quality, and contribute to inflammation.
          </p>
        </div>
      )}
    </div>
  );
};

// Enhanced MicronutrientPanel to show vitamins and minerals with benefits
const EnhancedMicronutrientPanel = ({ nutrients }: { nutrients: NutrientDetail[] }) => {
  // Filter out the macronutrients to show only micronutrients
  const micronutrients = nutrients.filter(n => 
    (n.name.toLowerCase().includes('vitamin') || 
     n.name.toLowerCase().includes('mineral') ||
     n.name.toLowerCase() === 'iron' ||
     n.name.toLowerCase() === 'calcium' ||
     n.name.toLowerCase() === 'magnesium' ||
     n.name.toLowerCase() === 'zinc' ||
     n.name.toLowerCase() === 'potassium' ||
     n.name.toLowerCase() === 'copper' ||
     n.name.toLowerCase() === 'manganese' ||
     n.name.toLowerCase() === 'selenium' ||
     n.name.toLowerCase() === 'phosphorus' ||
     n.name.toLowerCase() === 'iodine') &&
    !n.name.toLowerCase().includes('calorie') &&
    !n.name.toLowerCase().includes('protein') &&
    !n.name.toLowerCase().includes('carb') &&
    !n.name.toLowerCase().includes('fat') &&
    !n.name.toLowerCase().includes('sodium') &&
    !n.name.toLowerCase().includes('fiber') &&
    !n.name.toLowerCase().includes('sugar')
  );
  
  if (micronutrients.length === 0) {
    return (
      <div className="bg-white rounded-lg border border-slate-200 shadow-sm p-4 mb-6">
        <h3 className="text-lg font-semibold text-slate-800 mb-3 flex items-center">
          <span className="mr-2">üçä</span>
          Micronutrient Profile
        </h3>
        <p className="text-slate-600 text-sm italic">No micronutrient data available for this meal.</p>
      </div>
    );
  }
  
  // Group micronutrients by type
  const vitamins = micronutrients.filter(n => n.name.toLowerCase().includes('vitamin'));
  const minerals = micronutrients.filter(n => 
    !n.name.toLowerCase().includes('vitamin') && 
    (n.name.toLowerCase() === 'iron' ||
     n.name.toLowerCase() === 'calcium' ||
     n.name.toLowerCase() === 'magnesium' ||
     n.name.toLowerCase() === 'zinc' ||
     n.name.toLowerCase() === 'potassium' ||
     n.name.toLowerCase() === 'copper' ||
     n.name.toLowerCase() === 'manganese' ||
     n.name.toLowerCase() === 'selenium' ||
     n.name.toLowerCase() === 'phosphorus' ||
     n.name.toLowerCase() === 'iodine')
  );
  
  return (
    <div className="bg-white rounded-lg border border-slate-200 shadow-sm p-4 mb-6">
      <h3 className="text-lg font-semibold text-slate-800 mb-3 flex items-center">
        <span className="mr-2">üçä</span>
        Micronutrient Profile
      </h3>
      
      {vitamins.length > 0 && (
        <div className="mb-4">
          <h4 className="text-md font-medium text-slate-700 mb-2 flex items-center">
            <span className="mr-1.5">üçã</span>
            Vitamins
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {vitamins.map((nutrient, index) => (
              <EnhancedNutrientDisplay key={index} nutrient={nutrient} />
            ))}
          </div>
        </div>
      )}
      
      {minerals.length > 0 && (
        <div>
          <h4 className="text-md font-medium text-slate-700 mb-2 flex items-center">
            <span className="mr-1.5">üßÇ</span>
            Minerals
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {minerals.map((nutrient, index) => (
              <EnhancedNutrientDisplay key={index} nutrient={nutrient} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default function MealAnalysisPage() {
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [loadingStage, setLoadingStage] = useState<string>('initializing');
  const [error, setError] = useState<string | null>(null);
  const [fallbackInfo, setFallbackInfo] = useState<AnalysisResult | null>(null);
  const router = useRouter();
  const { currentUser } = useAuth();

  // Check if the meal was saved
  const [mealSaved, setMealSaved] = useState<boolean>(false);
  const [savedImageUrl, setSavedImageUrl] = useState<string>('');
  const [savedMealId, setSavedMealId] = useState<string>('');
  const [animationComplete, setAnimationComplete] = useState<boolean>(false);
  
  // Get save error if present
  const [saveError, setSaveError] = useState<string | null>(null);
  
  // State for precision nutrient analysis
  const [precisionAnalysis, setPrecisionAnalysis] = useState<any>(null);
  const [loadingPrecisionAnalysis, setLoadingPrecisionAnalysis] = useState<boolean>(false);
  
  useEffect(() => {
    // Get saved status from sessionStorage
    const savedStatus = sessionStorage.getItem('mealSaved') === 'true';
    setMealSaved(savedStatus);
    
    if (savedStatus) {
      setSavedImageUrl(sessionStorage.getItem('savedImageUrl') || '');
      setSavedMealId(sessionStorage.getItem('savedMealId') || '');
    }
  }, []);

  useEffect(() => {
    // Check if we have analysis data in sessionStorage
    const storedResult = sessionStorage.getItem('analysisResult');
    const storedPreviewUrl = sessionStorage.getItem('previewUrl');
    
    // Check for stored fallback result from the upload page
    const storedFallbackResult = sessionStorage.getItem('fallbackResult');
    if (storedFallbackResult) {
      try {
        const fallbackData = JSON.parse(storedFallbackResult);
        console.warn("Fallback data detected from upload page:", fallbackData);
        setFallbackInfo({
          ...fallbackData,
          fallback: true,
          failureReason: fallbackData.message || "Image could not be processed completely."
        });
        setError("Analysis Fallback");
        setLoading(false);
        setLoadingStage('error');
        // Clear the fallback data to prevent showing it again on refresh
        sessionStorage.removeItem('fallbackResult');
        return;
      } catch (parseError) {
        console.error("Failed to parse fallback result:", parseError);
      }
    }
    
    if (storedResult) {
      try {
        setLoadingStage('parsing');
        
        // Log the raw response for debugging
        console.log("Raw analysis result:", storedResult);
        
        let parsedResult;
        try {
          parsedResult = JSON.parse(storedResult);
          
          // Debug logging for better visibility into the data structure
          console.log("Parsed result structure:", {
            hasResult: !!parsedResult.result,
            topLevelKeys: Object.keys(parsedResult),
            hasFeedback: parsedResult.result ? !!parsedResult.result.feedback : !!parsedResult.feedback,
            hasSuggestions: parsedResult.result ? !!parsedResult.result.suggestions : !!parsedResult.suggestions,
            feedbackType: parsedResult.result ? typeof parsedResult.result.feedback : typeof parsedResult.feedback,
            suggestionsType: parsedResult.result ? typeof parsedResult.result.suggestions : typeof parsedResult.suggestions
          });
          
          // If data is nested in a result property, unwrap it
          if (parsedResult.result && typeof parsedResult.result === 'object') {
            console.log("Found nested result object, unwrapping");
            parsedResult = parsedResult.result;
          }
        } catch (parseError) {
          console.warn("Invalid analysis data (parse error):", storedResult);
          console.error('Failed to parse JSON:', parseError);
          throw new Error('Invalid analysis data: failed to parse JSON');
        }
        
        // Check if the result has basic structure needed for display
        // We now accept fallback results as long as they have the minimum required fields
        if (!isValidAnalysis(parsedResult)) {
          console.warn("Invalid analysis data (structure validation failed):", parsedResult);
          setError("Received incomplete analysis data.");
          setLoading(false);
          setLoadingStage('error');
          sessionStorage.removeItem('analysisResult');
          sessionStorage.removeItem('previewUrl');
          return;
        }
        
        // Set preview image first for perceived performance
        if (storedPreviewUrl) {
          setPreviewUrl(storedPreviewUrl);
        }
        
        // Normalize the result to ensure all required fields exist
        const normalizedResult = normalizeAnalysisResult(parsedResult);
        
        // Slight delay before showing results to allow for animation
        setTimeout(() => {
          setLoadingStage('rendering');
          setAnalysisResult(normalizedResult);
          
          // Complete loading after a small delay to allow for rendering
          setTimeout(() => {
            setLoadingStage('complete');
            setLoading(false);
            
            // Trigger score animations after rendering is complete
            setTimeout(() => {
              setAnimationComplete(true);
            }, 300);
          }, 100);
        }, 300);
      } catch (err: any) {
        console.error('Failed to process stored analysis result:', err);
        
        // Create a user-friendly error message
        const errorMessage = err.message && err.message.includes('Invalid analysis data') 
          ? 'Something went wrong processing your meal data. Please try again or upload a different image.'
          : 'Failed to load analysis results. Please try uploading a new image.';
        
        setError(errorMessage);
        setLoading(false);
        setLoadingStage('error');
      }
    } else {
      // No analysis data found, redirect to upload page
      router.push('/upload');
    }
  }, [router]);

  useEffect(() => {
    // Check for save error in sessionStorage
    const savedError = sessionStorage.getItem('saveError');
    if (savedError) {
      setSaveError(savedError);
    }
  }, []);

  // Add a new useEffect to run precision analysis when analysis result is loaded
  useEffect(() => {
    if (analysisResult && analysisResult.detailedIngredients && analysisResult.detailedIngredients.length > 0) {
      const runPrecisionAnalysis = async () => {
        try {
          setLoadingPrecisionAnalysis(true);
          
          // Extract ingredient names for precision analysis
          const ingredients = analysisResult.detailedIngredients.map(ingredient => ingredient.name);
          const goal = analysisResult.goalName || analysisResult.rawGoal || 'Improve Health';
          const requestId = uuidv4();
          
          console.log(`üîç [${requestId}] Starting precision nutrient analysis for ${ingredients.length} ingredients with goal: ${goal}`);
          
          // Run the precision analysis
          const result = await analyzeMealWithPrecision(ingredients, goal, requestId);
          
          // Update state with the analysis result
          setPrecisionAnalysis(result);
          
          console.log(`‚úÖ [${requestId}] Completed precision nutrient analysis`);
        } catch (error) {
          console.error('Error running precision analysis:', error);
        } finally {
    }
            <EnhancedHealthImpact 
              benefitTags={analysisResult?.benefitTags || []} 
              concernTags={analysisResult?.concernTags || []} 
              glycemicInfo={analysisResult?.glycemicInfo} 
              nutrients={analysisResult?.nutrients || []} 
              goal={analysisResult?.goalName || analysisResult?.rawGoal || ""} 
            />
  }, [analysisResult]);

  // Render loading skeleton
  if (loading && loadingStage !== 'complete') {
    return (
      <div className="max-w-2xl mx-auto pb-12 animate-fade-in">
        <div className="bg-white shadow-lab rounded-xl overflow-hidden mb-6 transition-all">
          {/* Skeleton for meal photo */}
          <div className="relative w-full h-64 bg-gray-200 animate-pulse"></div>

          <div className="p-6 space-y-6">
            {/* Skeleton for title */}
            <div className="h-7 w-1/3 bg-gray-200 rounded animate-pulse"></div>
            
            {/* Skeleton for score card */}
            <div className="h-40 w-full bg-gray-100 rounded-lg animate-pulse"></div>
            
            {/* Skeleton for sections */}
            <div className="space-y-4">
              <div className="h-6 w-2/5 bg-gray-200 rounded animate-pulse"></div>
              <div className="space-y-2">
                <div className="h-24 w-full bg-gray-100 rounded-lg animate-pulse"></div>
              </div>
            </div>
            
            {/* Skeleton for another section */}
            <div className="space-y-4">
              <div className="h-6 w-2/5 bg-gray-200 rounded animate-pulse"></div>
              <div className="space-y-2">
                <div className="h-24 w-full bg-gray-100 rounded-lg animate-pulse"></div>
              </div>
            </div>
            
            {/* Skeleton for buttons */}
            <div className="flex space-x-3 pt-4">
              <div className="h-12 w-1/2 bg-gray-200 rounded animate-pulse"></div>
              <div className="h-12 w-1/2 bg-gray-200 rounded animate-pulse"></div>
            </div>
          </div>
          
          <div className="absolute bottom-4 right-4 text-xs text-gray-400">
            {loadingStage === 'initializing' && 'Loading data...'}
            {loadingStage === 'parsing' && 'Processing analysis...'}
            {loadingStage === 'rendering' && 'Preparing insights...'}
            {loadingStage === 'error' && 'Error loading analysis...'}
          </div>
        </div>
      </div>
    );
  }

  // Display an error message if something went wrong
  if (error) {
    // ‚úÖ 3. Improved Fallback UI
    if (fallbackInfo) {
      return (
        <div className="min-h-[60vh] flex items-center justify-center p-4">
          <ErrorCard
            title="Analysis Failed"
            message={
              fallbackInfo.failureReason || 
              fallbackInfo.message || 
              "The AI couldn't properly analyze this meal image. Please try again with a clearer photo."
            }
            tip="For best results, take photos in good lighting with the food clearly visible. Make sure all food items are in frame and easily distinguishable."
            buttonText="Try Another Photo"
            onClick={() => router.push('/upload')}
          />
        </div>
      );
    } else {
      // Render generic error if no specific fallback info
      return (
        <div className="min-h-[60vh] flex items-center justify-center">
          <ErrorCard
            title="Analysis Error"
            message={error}
            tip="If this problem persists, try refreshing your browser or uploading a different image."
            buttonText="Try Again"
            onClick={() => router.push('/upload')}
          />
        </div>
      );
    }
  }

  if (!analysisResult) {
    return (
      <div className="min-h-[60vh] flex items-center justify-center">
        <div className="text-center max-w-sm mx-auto bg-white shadow-lab rounded-xl p-6">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-yellow-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">No Analysis Found</h2>
          <p className="text-gray-600 mb-6">Please upload a meal photo to analyze.</p>
          <Link 
            href="/upload" 
            className="inline-block bg-primary hover:bg-secondary text-white font-medium py-2 px-4 rounded-lg transition-colors"
          >
            Upload Meal Photo
          </Link>
        </div>
      </div>
    );
  }

  // Get feedback and suggestions from analysis result for easier reading
  const feedback = analysisResult?.feedback || [];
  const suggestions = analysisResult?.suggestions || [];
  const description = analysisResult?.description || 'No description provided';
  const goalScore = analysisResult?.goalScore || 5;
  const scoreExplanation = analysisResult?.scoreExplanation || '';
  const goalName = analysisResult?.goalName || 'Health';
  const rawGoal = analysisResult?.rawGoal || '';
  const fallback = analysisResult?.fallback === true;
  const positiveFoodFactors = analysisResult?.positiveFoodFactors || [];
  const negativeFoodFactors = analysisResult?.negativeFoodFactors || [];

  // Use the helper function from types.ts for display description
  const displayDescription = getDisplayDescription(analysisResult);

  // Group nutrients into categories - with validation to prevent errors
  const macros = Array.isArray(analysisResult?.nutrients) ? analysisResult.nutrients.filter(n => 
    n && n.name && ['protein', 'carbs', 'carbohydrate', 'fat', 'calories', 'calorie'].some(
      macro => n.name.toLowerCase().includes(macro)
    )
  ) : [];
  
  const micronutrients = Array.isArray(analysisResult?.nutrients) ? analysisResult.nutrients.filter(n => 
    n && n.name && !['protein', 'carbs', 'carbohydrate', 'fat', 'calories', 'calorie'].some(
      macro => n.name.toLowerCase().includes(macro)
    ) && n.isHighlight
  ) : [];
  
  const otherNutrients = Array.isArray(analysisResult?.nutrients) ? analysisResult.nutrients.filter(n => 
    n && n.name && !['protein', 'carbs', 'carbohydrate', 'fat', 'calories', 'calorie'].some(
      macro => n.name.toLowerCase().includes(macro)
    ) && !n.isHighlight
  ) : [];
  
  // Generate score color based on value
  const getScoreColor = (value: number | { overall: number; specific: Record<string, number> }) => {
    // Extract the score value using our helper function
    const scoreValue = getScoreValue(value);
    
    if (scoreValue >= 8) return 'bg-green-500';
    if (scoreValue >= 5) return 'bg-yellow-400';
    return 'bg-red-500';
  };

  // Get goal icon based on goal name
  const getGoalIcon = (goalName: string = '') => {
    const name = (goalName || '').toLowerCase();
    if (name.includes('sleep')) return 'üí§';
    if (name.includes('weight')) return '‚öñÔ∏è';
    if (name.includes('muscle')) return 'üí™';
    if (name.includes('energy')) return '‚ö°';
    if (name.includes('heart')) return '‚ù§Ô∏è';
    if (name.includes('recovery')) return 'üîÑ';
    if (name.includes('run')) return 'üèÉ';
    if (name.includes('performance')) return 'üèÜ';
    return 'üéØ';
  };

  // Get score label using our score value helper
  const getScoreLabel = (score: number | { overall: number; specific: Record<string, number> }) => {
    const safeScore = getScoreValue(score);
    
    if (safeScore >= 9) return "Excellent";
    if (safeScore >= 7) return "Very Good";
    if (safeScore >= 5) return "Good";
    if (safeScore >= 3) return "Fair";
    return "Needs Improvement";
  };

  return (
    <div className="pb-20 sm:pb-24 md:pb-12">
      {/* Sticky header for mobile */}
      <header className="fixed top-0 w-full bg-white z-10 md:hidden shadow-sm">
        <div className="flex items-center justify-between px-3 py-2">
          <h1 className="text-lg font-bold text-primary truncate">Meal Analysis</h1>
          <button
            onClick={() => router.back()}
            className="p-2 text-gray-500 hover:text-gray-700 focus:outline-none"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      </header>

      <div className="max-w-2xl mx-auto pt-14 md:pt-0 px-3 sm:px-4">
        {/* Desktop back button */}
        <div className="hidden md:block mb-6">
          <button
            onClick={() => router.back()}
            className="flex items-center text-gray-600 hover:text-gray-900"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
            </svg>
            Back
          </button>
        </div>

        <SaveStatusBanner 
          mealSaved={mealSaved} 
          fallback={Boolean(analysisResult?.fallback)}
          lowConfidence={Boolean(analysisResult?.lowConfidence)}
          saveError={saveError}
          userId={currentUser?.uid || null}
        />
        
        {/* Fallback Alert - shown when fallback, lowConfidence, or no_result */}
        <FallbackAlert 
          show={Boolean(analysisResult?.fallback || analysisResult?.lowConfidence || analysisResult?.no_result)} 
          noResult={Boolean(analysisResult?.no_result)}
          isNoTextDetected={analysisResult?.modelInfo?.model === 'ocr_failed' && !analysisResult?.modelInfo?.ocrExtracted}
          isNoFoodDetected={analysisResult?.modelInfo?.model === 'no_food_detected' || (!analysisResult?.detailedIngredients || analysisResult?.detailedIngredients.length === 0)}
          message={analysisResult?.message}
        />
        
        {/* Show fallback warning banner for fallback results */}
        <FallbackWarningBanner fallback={fallback} />
        
        {/* Show model warning banner for fallback models */}
        <ModelWarningBanner modelInfo={analysisResult?.modelInfo} />

        {/* Label Detection Info */}
        <LabelDetectionInfo modelInfo={analysisResult?.modelInfo} />

        {/* Main analysis section */}
        <div className="bg-white rounded-lg shadow-md overflow-hidden mb-6">
          {/* Summary Section: Photo + Score */}
          <div className="relative">
            {previewUrl && (
              <div className="relative w-full h-64 bg-gray-100">
                <Image
                  src={previewUrl}
                  alt="Analyzed meal"
                  fill
                  style={{ objectFit: 'cover' }}
                  className="transition-opacity duration-300"
                  priority
                />
                {/* Score Overlay */}
                <div className="absolute bottom-0 right-0 p-3">
                  <div className="bg-white/90 backdrop-blur-sm rounded-lg p-2 shadow-lab flex items-center">
                    <div 
                      className={`w-12 h-12 rounded-full flex items-center justify-center text-white text-xl font-bold ${getScoreColor(goalScore)}`}
                    >
                      {typeof goalScore === 'number' ? goalScore : 5}
                    </div>
                    <div className="ml-2">
                      <span className="text-xs font-medium uppercase text-gray-500">Score</span>
                      <p className="text-sm font-medium">{getScoreLabel(typeof goalScore === 'number' ? goalScore : 5)}</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="p-6">
            {/* Header with Goal Context */}
            <div className="mb-6">
              <div className="flex items-center mb-2">
                <span className="text-3xl mr-3">{getGoalIcon(goalName)}</span>
                <div>
                  <h1 className="text-2xl font-bold text-navy">{goalName || 'Health'} Analysis</h1>
                  <p className="text-slate text-sm">Goal: {rawGoal || 'Improve overall health'}</p>
                </div>
              </div>
            </div>

            {/* Score Card with Score Explanation */}
            <div className="mb-8 bg-white rounded-xl border border-slate/20 shadow-sm p-5">
              <h2 className="font-bold text-navy text-lg mb-3">Goal Impact Score: {typeof goalScore === 'number' ? goalScore : 5}/10</h2>
              
              <div className="w-full bg-gray-200 rounded-full h-3 mb-3">
                <div 
                  className={`h-3 rounded-full transition-all duration-1000 ease-out ${getScoreColor(typeof goalScore === 'number' ? goalScore : 5)}`}
                  style={{ width: animationComplete ? `${(typeof goalScore === 'number' ? goalScore : 5) * 10}%` : '0%' }}
                ></div>
              </div>
              
              <p className="text-slate mb-4">{scoreExplanation || 'This meal has been analyzed based on your health goals.'}</p>
              
              {/* Meal Description */}
              <p className="text-navy text-sm italic border-t border-slate/10 pt-3 mt-2">{displayDescription || 'Meal analysis completed.'}</p>
            </div>

            {/* Precision Nutrient Analysis Section */}
            {analysisResult?.nutrients && analysisResult.nutrients.length > 0 ? (
              <>
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-indigo-600 mr-2">üî¨</span>
                  Precision Nutrient Analysis
                </h2>
                
                {/* Enhanced Macronutrient Panel */}
                <EnhancedMacronutrientPanel nutrients={analysisResult.nutrients} />
                
                {/* Enhanced Micronutrient Panel */}
                <EnhancedMicronutrientPanel nutrients={analysisResult.nutrients} />
                
                {/* If precision analysis is available, show the detailed breakdown */}
                {precisionAnalysis?.success && (
                  <PrecisionNutrientPanel
                    quantifiedIngredients={precisionAnalysis.ingredients}
                    totalNutrients={precisionAnalysis.totalNutrients}
                    goalSpecificInsights={precisionAnalysis.goalSpecificInsights}
                    goal={analysisResult?.goalName || analysisResult?.rawGoal || undefined}
                    className="mt-4"
                  />
                )}
              </>
            ) : loadingPrecisionAnalysis ? (
              <div className="mb-6">
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-indigo-600 mr-2">üî¨</span>
                  Precision Nutrient Analysis
                </h2>
                <div className="bg-white border border-slate-200 rounded-lg p-6 text-center">
                  <div className="flex flex-col items-center justify-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-600 mb-3"></div>
                    <p className="text-slate-600">Analyzing nutrient composition...</p>
                  </div>
                </div>
              </div>
            ) : null}

            {/* How It Helps Your Goal Section */}
            {Array.isArray(positiveFoodFactors) && positiveFoodFactors.length > 0 && (
              <div className="mb-6">
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-green-600 mr-2">‚úì</span>
                  How This Meal Supports Your Goal
                </h2>
                <div className="bg-green-50 border border-green-100 rounded-xl p-4">
                  <ul className="space-y-2.5">
                    {positiveFoodFactors.map((factor, index) => (
                      <li key={index} className="flex">
                        <span className="text-green-600 mr-2.5 mt-0.5">‚Ä¢</span>
                        <span className="text-slate">{factor}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* What May Hold You Back Section */}
            {Array.isArray(negativeFoodFactors) && negativeFoodFactors.length > 0 && (
              <div className="mb-6">
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-amber-600 mr-2">‚ö†Ô∏è</span>
                  What May Hold You Back
                </h2>
                <div className="bg-amber-50 border border-amber-100 rounded-xl p-4">
                  <ul className="space-y-2.5">
                    {negativeFoodFactors.map((factor, index) => (
                      <li key={index} className="flex">
                        <span className="text-amber-600 mr-2.5 mt-0.5">‚Ä¢</span>
                        <span className="text-slate">{factor}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* Health Impact Section */}
            <HealthImpactPanel 
              benefitTags={analysisResult?.benefitTags || []} 
              concernTags={analysisResult?.concernTags || []}
              glycemicInfo={analysisResult?.glycemicInfo}
            />

            {/* Expert Suggestions Section */}
            {suggestions && (
              <div className="mb-6">
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-indigo mr-2">üí°</span>
                  Personalized Expert Suggestions
                </h2>
                <div className="bg-indigo/5 border border-indigo/20 rounded-xl p-4">
                  <ul className="space-y-2.5">
                    {processFeedback(suggestions).map((suggestion, index) => (
                      <li key={index} className="flex">
                        <span className="text-indigo mr-2.5 mt-0.5 shrink-0">{index + 1}.</span>
                        <span className="text-slate">{suggestion}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* Feedback section */}
            {feedback && (
              <div className="mb-6">
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-indigo mr-2">üìù</span>
                  Nutritional Insights
                </h2>
                <div className="bg-indigo/5 border border-indigo/20 rounded-xl p-4">
                  <ul className="space-y-2.5">
                    {processFeedback(feedback).map((item, index) => (
                      <li key={index} className="flex">
                        <span className="text-indigo mr-2.5 mt-0.5">‚Ä¢</span>
                        <span className="text-slate">{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* Ingredients List */}
            {Array.isArray(analysisResult?.detailedIngredients) && analysisResult.detailedIngredients.length > 0 && (
              <div className="mb-6">
                <h2 className="font-bold text-navy text-lg mb-3 flex items-center">
                  <span className="text-teal-600 mr-2">üß™</span>
                  Identified Ingredients
                </h2>
                <div className="bg-white border border-slate/20 rounded-xl p-4">
                  <IngredientsList ingredients={analysisResult.detailedIngredients} />
                </div>
              </div>
            )}

            {/* Fallback message for incomplete analysis */}
            {(fallback || analysisResult?.lowConfidence) && (
              <div className="mb-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
                <div className="flex items-start">
                  <div className="shrink-0 pt-0.5">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-amber-800">Limited Analysis Available</h3>
                    <p className="mt-1 text-sm text-amber-700">
                      We couldn't get a full analysis of this image, but here's what we could extract.
                    </p>
                  </div>
                </div>
              </div>
            )}
            
            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-3 mt-8">
              <Link
                href="/upload"
                className="flex-1 bg-primary hover:bg-secondary text-white text-center font-medium py-3 px-4 rounded-lg transition-colors shadow-sm"
              >
                Analyze Another Meal
              </Link>
              
              {mealSaved ? (
                <Link
                  href="/history"
                  className="flex-1 bg-white hover:bg-gray-50 text-navy border border-gray-200 text-center font-medium py-3 px-4 rounded-lg transition-colors shadow-sm"
                >
                  View Meal History
                </Link>
              ) : currentUser ? (
                <Link
                  href="/upload"
                  className="flex-1 bg-white hover:bg-gray-50 text-navy border border-gray-200 text-center font-medium py-3 px-4 rounded-lg transition-colors shadow-sm"
                >
                  Save Meals to Track Progress
                </Link>
              ) : (
                <Link
                  href="/login"
                  className="flex-1 bg-white hover:bg-gray-50 text-navy border border-gray-200 text-center font-medium py-3 px-4 rounded-lg transition-colors shadow-sm"
                >
                  Sign In to Save Analysis
                </Link>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 
