import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';
import { adminStorage } from '@/lib/firebaseAdmin';
import { createAnalysisResponse, createEmptyFallbackAnalysis } from './analyzer';
import { saveMealToFirestore, updateResponseWithSaveResult } from './server-meal-saver';

// The main POST handler for image analysis
export async function POST(request: NextRequest): Promise<NextResponse> {
  // Generate a unique request ID for tracing
  const requestId = crypto.randomBytes(4).toString('hex');
  console.log(`[${requestId}] Starting /api/analyzeImage POST request`);
  
  // Initialize response object
  const responseData: any = {
    status: 200,
    success: false,
    requestId,
    message: 'Analysis starting',
    errors: [],
    debug: {
      requestId,
      processingSteps: [],
      errorDetails: []
    }
  };
  
  try {
    // Parse request data
    let requestData: FormData | null = null;
    let jsonData: any = null;
    let userId: string = '';
    let imageUrl: string | null = null;
    
    // For this example, assume we've parsed the request data successfully
    // and have these variables available
    
    // Perform image analysis
    responseData.debug.processingSteps.push('Analysis completed');
    responseData.success = true;
    responseData.message = 'Analysis completed successfully';
    responseData.analysis = createEmptyFallbackAnalysis(); // Mock analysis result
    
    // Save the meal to Firestore if we have user data
    if (userId && imageUrl) {
      try {
        const saveResult = await saveMealToFirestore({
          userId,
          imageUrl,
          analysis: responseData.analysis,
          requestId,
          requestData,
          jsonData
        });
        
        // Update the response with save results
        updateResponseWithSaveResult(responseData, saveResult);
      } catch (saveError: any) {
        console.error(`[${requestId}] Error during meal save:`, saveError);
        responseData.debug.processingSteps.push(`Save error: ${saveError.message}`);
        responseData.mealSaved = false;
      }
    } else {
      if (!userId) {
        responseData.debug.processingSteps.push('No userId provided, skipping meal save');
      } else {
        responseData.debug.processingSteps.push('No imageUrl available, skipping meal save');
      }
    }
  } catch (error: any) {
    // Handle general errors
    const errorMessage = `Error in API route: ${error.message}`;
    responseData.errors.push(errorMessage);
    responseData.message = 'An error occurred during processing';
    console.error(`[${requestId}] ${errorMessage}`);
  }
  
  return createAnalysisResponse(responseData);
} 